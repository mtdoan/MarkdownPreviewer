{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","markdown","setMarkdown","className","id","value","onChange","e","target","children","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAuGeA,MA5Bf,WAAgB,IAAD,EAEmBC,mBA/CjB,0pCA6CF,mBAENC,EAFM,KAEIC,EAFJ,KAIb,OACE,gCACE,oBAAIC,UAAU,cAAd,mCACA,sBAAKC,GAAG,QAAQD,UAAU,MAA1B,UACI,oBAAIA,UAAU,QAAd,mBACA,oBAAIA,UAAU,QAAd,uBAEJ,sBAAKA,UAAU,yBAAf,UAEE,0BACEC,GAAG,SACHD,UAAU,QACVE,MAASJ,EACTK,SAAY,SAACC,GAAD,OAAOL,EAAYK,EAAEC,OAAOH,UAE1C,qBAAKD,GAAG,UAAUD,UAAU,0BAA5B,SACE,cAAC,IAAD,CAAeM,SAAUR,aCnFpBS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f0d7ab4f.chunk.js","sourcesContent":["import React, {Component, useState} from 'react';\nimport './App.css';\nimport { FormGroup, FormLabel, FormControl } from 'react-bootstrap';\nimport ReactMarkdown from 'react-markdown';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {text: \"\"};\n//     this.setText = this.setText.bind(this);\n//   }\n//   setText(text) {s\n//     this.setState({text: text});\n//   }\n//   render() {\n//     const {text} = this.state;\n//     return (\n//       <div className=\"markdown_container\">\n//         <textarea \n//           value = {text}\n//           onChange = {(e) => this.setText(e.target.value)}\n//         />  \n//         <ReactMarkdown children={text} className=\"markdown_preview\" />\n//       </div>\n//     );  \n//   }\n// }\n\n// let marked = require(\"marked\")\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.org), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\n`;\n\nfunction App() {\n  \n  const [markdown, setMarkdown] = useState(placeholder);\n\n  return (\n    <div >\n      <h1 className=\"text-center\">Convert your markdown</h1>\n      <div id=\"title\" className=\"row\">\n          <h3 className=\"col-6\">Input</h3>\n          <h3 className=\"col-6\">Output</h3>\n        </div>  \n      <div className=\"markdown_container row\">\n        \n        <textarea\n          id=\"editor\"\n          className=\"col-6\"\n          value = {markdown}\n          onChange = {(e) => setMarkdown(e.target.value)}\n        />\n        <div id=\"preview\" className=\"preview_container col-6\">\n          <ReactMarkdown children={markdown} />\n        </div>\n      </div> \n\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}